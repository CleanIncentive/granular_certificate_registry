"""certificate_device_normalisation

Revision ID: 172d3692339f
Revises: 82a3317c274a
Create Date: 2024-09-22 14:58:43.891405

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from gc_registry.certificate.schemas import CertificateStatus

# revision identifiers, used by Alembic.
revision: str = "172d3692339f"
down_revision: Union[str, None] = "82a3317c274a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    status_enum = sa.Enum(CertificateStatus, name="certificate_status")
    status_enum.create(op.get_bind())  # Create it in the database
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "granularcertificateregistry",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("country_of_issuance", sa.String(), nullable=False),
        sa.Column("connected_grid_identification", sa.String(), nullable=False),
        sa.Column("issuing_body", sa.String(), nullable=False),
        sa.Column("legal_status", sa.String(), nullable=True),
        sa.Column("issuance_purpose", sa.String(), nullable=True),
        sa.Column("support_received", sa.String(), nullable=True),
        sa.Column("quality_scheme_reference", sa.String(), nullable=True),
        sa.Column("dissemination_level", sa.String(), nullable=True),
        sa.Column("issue_market_zone", sa.String(), nullable=False),
        sa.Column("emissions_factor_production_device", sa.Float(), nullable=True),
        sa.Column("emissions_factor_source", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("account", sa.Column("created_at", sa.DateTime(), nullable=False))
    op.add_column("device", sa.Column("created_at", sa.DateTime(), nullable=False))
    op.add_column("device", sa.Column("is_storage", sa.Boolean(), nullable=False))
    op.add_column(
        "granularcertificateaction",
        sa.Column("created_at", sa.DateTime(), nullable=False),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("registry_id", sa.Integer(), nullable=False),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("is_storage", sa.Integer(), nullable=False),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("created_at", sa.DateTime(), nullable=False),
    )
    op.alter_column(
        "granularcertificatebundle",
        "certificate_status",
        existing_type=sa.String(),
        type_=status_enum,
        postgresql_using="certificate_status::certificate_status",
        existing_nullable=False,
    )
    op.drop_constraint(
        "granularcertificatebundle_storage_id_fkey",
        "granularcertificatebundle",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "gcregistry_registry_id_fkey",
        "granularcertificatebundle",
        "granularcertificateregistry",
        ["registry_id"],
        ["id"],
    )
    op.drop_column("granularcertificatebundle", "storage_id")
    op.drop_column("granularcertificatebundle", "support_received")
    op.drop_column("granularcertificatebundle", "device_production_start_date")
    op.drop_column("granularcertificatebundle", "issuing_body")
    op.drop_column("granularcertificatebundle", "emissions_factor_production_device")
    op.drop_column("granularcertificatebundle", "registry_configuration")
    op.drop_column("granularcertificatebundle", "legal_status")
    op.drop_column("granularcertificatebundle", "storage_device_location")
    op.drop_column("granularcertificatebundle", "dissemination_level")
    op.drop_column("granularcertificatebundle", "connected_grid_identification")
    op.drop_column("granularcertificatebundle", "issue_market_zone")
    op.drop_column("granularcertificatebundle", "device_type")
    op.drop_column("granularcertificatebundle", "issuance_purpose")
    op.drop_column("granularcertificatebundle", "device_name")
    op.drop_column("granularcertificatebundle", "emissions_factor_source")
    op.drop_column("granularcertificatebundle", "device_capacity")
    op.drop_column("granularcertificatebundle", "device_technology_type")
    op.drop_column("granularcertificatebundle", "device_location")
    op.drop_column("granularcertificatebundle", "discharging_start_datetime")
    op.drop_column("granularcertificatebundle", "discharging_end_datetime")
    op.drop_column("granularcertificatebundle", "country_of_issuance")
    op.drop_column("granularcertificatebundle", "quality_scheme_reference")
    op.add_column(
        "measurementreport", sa.Column("created_at", sa.DateTime(), nullable=False)
    )
    op.add_column(
        "organisation", sa.Column("created_at", sa.DateTime(), nullable=False)
    )
    op.add_column(
        "storageaction", sa.Column("created_at", sa.DateTime(), nullable=False)
    )
    op.add_column(
        "storagechargerecord", sa.Column("created_at", sa.DateTime(), nullable=False)
    )
    op.add_column(
        "storagedischargerecord", sa.Column("created_at", sa.DateTime(), nullable=False)
    )
    op.add_column("user", sa.Column("created_at", sa.DateTime(), nullable=False))
    op.add_column(
        "useraccountlink", sa.Column("created_at", sa.DateTime(), nullable=False)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("useraccountlink", "created_at")
    op.drop_column("user", "created_at")
    op.drop_column("storagedischargerecord", "created_at")
    op.drop_column("storagechargerecord", "created_at")
    op.drop_column("storageaction", "created_at")
    op.drop_column("organisation", "created_at")
    op.drop_column("measurementreport", "created_at")
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "quality_scheme_reference", sa.VARCHAR(),  nullable=True
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "country_of_issuance", sa.VARCHAR(),  nullable=False
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "discharging_end_datetime",
            postgresql.TIMESTAMP(),
            
            nullable=True,
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "discharging_start_datetime",
            postgresql.TIMESTAMP(),
            
            nullable=True,
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "device_location",
            postgresql.ARRAY(sa.DOUBLE_PRECISION(precision=53)),
            nullable=True,
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "device_technology_type", sa.VARCHAR(), nullable=False
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("device_capacity", sa.INTEGER(),  nullable=False),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "emissions_factor_source", sa.VARCHAR(),  nullable=True
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("device_name", sa.VARCHAR(),  nullable=False),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("issuance_purpose", sa.VARCHAR(),  nullable=True),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("device_type", sa.VARCHAR(),  nullable=False),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "issue_market_zone", sa.VARCHAR(),  nullable=False
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "connected_grid_identification",
            sa.VARCHAR(),
            
            nullable=False,
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "dissemination_level", sa.VARCHAR(),  nullable=True
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "storage_device_location",
            postgresql.ARRAY(sa.DOUBLE_PRECISION(precision=53)),
            
            nullable=True,
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("legal_status", sa.VARCHAR(),  nullable=True),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "registry_configuration", sa.INTEGER(),  nullable=False
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "emissions_factor_production_device",
            sa.DOUBLE_PRECISION(precision=53),
            
            nullable=True,
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("issuing_body", sa.VARCHAR(),  nullable=False),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column(
            "device_production_start_date",
            postgresql.TIMESTAMP(),
            
            nullable=False,
        ),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("support_received", sa.VARCHAR(),  nullable=True),
    )
    op.add_column(
        "granularcertificatebundle",
        sa.Column("storage_id", sa.INTEGER(),  nullable=True),
    )
    op.drop_constraint(
        "gcregistry_registry_id_fkey", "granularcertificatebundle", type_="foreignkey"
    )
    op.create_foreign_key(
        "granularcertificatebundle_storage_id_fkey",
        "granularcertificatebundle",
        "device",
        ["storage_id"],
        ["id"],
    )
    op.alter_column(
        "granularcertificatebundle",
        "certificate_status",
        type_=sa.String(),
        existing_nullable=False,
    )
    op.drop_column("granularcertificatebundle", "created_at")
    op.drop_column("granularcertificatebundle", "is_storage")
    op.drop_column("granularcertificatebundle", "registry_id")
    op.drop_column("granularcertificateaction", "created_at")
    op.drop_column("device", "is_storage")
    op.drop_column("device", "created_at")
    op.drop_column("account", "created_at")
    op.drop_table("granularcertificateregistry")
    # ### end Alembic commands ###
